'use strict'

// Флаги
// i - ігнорує регістр*
// g - глобальний погук а не перший збіг*
// m - багатостроковий пошук*
// Класи
// \d - numbers 0-9*
// \D - not numbers*
// \w - word*
// \W - not word*
// \s - space*
// \S - not space*
// \b - word or symbol with spase around*
// \B - not word*
// [] - набір *
// - діапазон *
// ^ - в [] це виключення за межами набору це початок строки*
// {} - показник кількості*
// () - група символів*
//  + - один або більше
//  ? - нуль або один
//  * - нуль або більше
//  . - будь - який символ*
//  $ - кінець строки*

// ==========================================================================================
// let reg = new RegExp(win);

// let pattern = /win/;
// const string = 'text windows win';
// console.log(string.match(pattern)); // массив с результатами
// console.log(pattern.test(string)); // вернет правдв или ложь 
// ========================================================================

// let string = 'Is that all there is?',
//     reg = /is/gi; // фЛАГ g (global) выдаст массив со всеми is но без учета регистра, если большое то не поймет
//                   // фЛАГ i (ignore) игнорирует регистр
//                   // gi ig  не имеет разницы порядок, и так и так сработает
// console.log(string.match(reg));

// ====================================================================
// let string = '12345 , q5 wg w. www h - whwhwh',
//     reg = /\d/g,  // d - класс для поиска чисел, все числа в строке
//                   // g - флаг, всегла пишется после / закрытия регулярного выражения
//     number = /5/g;

// console.log(string.match(reg));
// console.log(string.match(number));

// ============================================================================
// let string = '12345 , q5 wg w. www h - whwhwh',
//     reg = /\D/g;  // d - класс для поиска всего кроме чисел
//                   // g - флаг, всегла пишется после / закрытия регулярного выражения
// console.log(string.match(reg));

// ===============================================================================
// let string = '12345 , q5 wg w. www h - whwhwh',
//     reg = /\w/g;  // w - класс для поиска всего (числе, букв) кроме спецсимволов (пробел , ; - = +)
//                   // g - флаг, всегла пишется после / закрытия регулярного выражения
// console.log(string.match(reg));

// ===================================================================================
// let string = '12345 , q5 wg w. www h - whwhwh',
//     reg = /\w/gi;  // w - класс для поиска всего (числе, букв) кроме спецсимволов (пробел , ; - = +)
//                   // g - флаг, всегла пишется после / закрытия регулярного выражения
// console.log(string.match(reg));

// ========================================================================================
// let string = '92345 123, 243 467 52 34 987 5',
//     regV = /\d{1,3}/g;  // d{1,3} - минимум и максимум 
// console.log(string.match(regV));

// ==============================================================================================
// let string = '92345 123, 243 467 52 34 987 5',
//     regV = /\d{3,}/g;  //  d{1,} - минимум и максимум хоть до бесконечности
//                        //  d{3,} - минимум и максимум хоть до бесконечности, поиск от трехзначных чисел и более
// console.log(string.match(regV));

// ======================================================================================================
// let string = '92345 123, 243 467 52 34 987 5',
//     regV = /\b\d{3}\b/g;  //  \b  - начало и конец слова, выделяет слово ищет пробелы
//                        //  /\b\d{3}\b/ - поиск только трехзначных чисел
// console.log(string.match(regV));

// =============================================================================================
// В ЕМЕЙЛЕ НЕ должно быть ничего кроме латинских букв и цифр
// let string = 'random text with a number - 5',
//     regV = /[a-zA-z0-9]/ig;  //[a-zA-z0-9] - квадратные скобки показывают что это набор
// console.log(string.match(regV));

// ==============================================================================================
// let string = 'random 1 text with a number 5 afafaf',
//     regV = /^\d{4}$/ig;  //  /^\d{4}$/  - проверка например пин для карты, только цифра из 4 чисел
//                         //   ^   - начало строки
//                         //  $  - конец строки
// console.log(string.match(regV));

// ================================================================================================
// let string = '22 random 1 text with a number 5;',
//     regV = /^\d{2}.{1,};$/ig;  //  . - любой один символ
// console.log(string.match(regV));

// ======================================================================================================
// let string = '22 random 1 text with a number 5;',
//     regV = /^\d{2}.{1,};$/ig;  //  \. - экранирование точки, поиск только точки
// console.log(string.match(regV));

// ======================================================================================================
//  \s - ищет чисто пробелы

// ===============================================================================================
// let string = 'The Car is parked in the garage parararar',
//     regV = /\b(c|g|p)[a-z]{1,}\b/gi;   // () - набор моих проверок которые нужно выполнить
//                                 //  |  - оператор или
//                                 // \b(c|g|p)ar\b - искать слова начинающиеся с (c или g или p) и заканчивается на (ar)
// console.log(string.match(regV));

// =====================================================================================================
// +   - это {1,}  его аналог просто
// ?  - символ может быть отстутсвующей или быть максимум одним {0,1}
// *  - символ может быть отстутсвующей или быть бесконечностью символов {0,}

// ==================================================================================================
// /\+\d{1,2}\(\d{2,3}\)\d{2,3}(\s|-)\d{2,3}(\s|-)\d{2,3}/g
// +8(054)789-98-45
// +4(01)789 52 12
// +78(111)78 98 852
// +1(1)1235-45-8
// +88(0214)12 25 21 3

// ===================================================================================================
// /\b\d{1,}\.?\d{1,}/g
// 45px
// 458.2rem
// 1.123647em
// asdas17px
// aa1245rem

// ===============================================================================================
/* Задача 1
Пошта починатися з будь-якої кількості літер чи цифр
Далі має йти @
Потім літери чи цифри від 2 до 5 символів
І закінчуватися на .com

Якщо пошта правильна намалювати під формою параграф з текстом
"Пошта валідна"
Якщо пошта не правильна намалювати параграф з текстом "Пошта неправильна" */
// let form = document.querySelector('form');
// let inputEmail = document.querySelector('[type="text"]');
// let regV = /^[a-zA-Z0-9]+@\w{2,5}\.com$/;
// function check(e) {
//     e.preventDefault();
//     console.log(regV.test(inputEmail.value));
// }
// form.addEventListener('submit', check);

// ====================================================================================================
// Module 11 ДОПОЛНИТЕЛЬНАЯ ЗАДАЧА 1
/*
  К pen уже подключен Handlebars.
  
  Создайте шаблон списка указаного во вкладке HTML.
  
  Отрендерите список в DOM по данным из массива listItems.
*/
// const listItems = [
//     { name: 'item 1', count: 2 },
//     { name: 'item 2', count: 4 },
//     { name: 'item 3', count: 12 },
//     { name: 'item 4', count: 29 },
// ];
// // 1) Получить доступ к шаблону
// const template = document.querySelector('#addres-template').innerHTML.trim();
// // 2) Запустить функцию шаблонизатор 
// const templateRun = Handlebars.compile(template);
// // 3) Обработать информацию. Передаем в функцию обьект
// const templateRunWithObject = templateRun({listItems});
// console.log(templateRunWithObject);
// // 4) Готовую разметку вставить на экран 
// const container = document.querySelector('.content-placeholder');
// container.innerHTML = templateRunWithObject;

// ====================================================================================================
// Module 11 ДОПОЛНИТЕЛЬНАЯ ЗАДАЧА 2
/*
  К pen уже подключен Handlebars.
  
  Создайте шаблон поста указаного во вкладке HTML.
  Отрендерите список постов в DOM по данным из массива posts.
  
  Если в объекте поле isFav=true, в посте должна быть 
  разметка иконки избранного поста, в противном случае
  разметки иконки быть не должно.
  
  Используйте эту иконку для фона:
  https://image.flaticon.com/icons/svg/290/290413.svg
*/
// const posts = [
//     { title: "post 1", text: "text 1", isFav: true },
//     { title: "post 2", text: "text 2", isFav: false },
//     { title: "post 3", text: "text 3", isFav: true },
//     { title: "post 4", text: "text 4", isFav: false }
//   ];
// // 1) Получить доступ к шаблону
// const template = document.querySelector('#addres-template').innerHTML.trim();
// // 2) Запустить функцию шаблонизатор 
// const templateRun = Handlebars.compile(template);
// // 3) Обработать информацию. Передаем в функцию обьект
// const templateRunWithObject = templateRun(posts);
// // 4) Готовую разметку вставить на экран 
// const container = document.querySelector('.content-placeholder');
// container.innerHTML = templateRunWithObject;


// ====================================================================================================
// Module 11 ДОПОЛНИТЕЛЬНАЯ ЗАДАЧА 3
/* 
  Напишите функцию validate которая проверяет поля формы 
  firstname и lastname и возвращает результат в виде 
  обьекта со свойствами 'first name' и 'last name'.
  
  Кроме того, формат объекта: в свойства записывается буль-флаг 
  уведомляющий о статусе прохождения валидации для каждого поля.
  {
    'first name': true или false,
    'last name': true или false,
  }

  Критерии валидации:
  1)Имя. Допускается не более 2-х слов, разделенных пробелами
  или дефисом. Слова должны состоять только из букв.
  
  2)Фамилия. Допускается не более 2-х слов, разделенных пробелами
  или дефисом. Слова должны состоять только из букв.
  
  При клике на кнопку submit должна происходить проверка.
  Результат проверки, объект, выводить в консоль.
*/

const firstname = document.getElementById("first_name");
const lastname = document.getElementById("last_name");
const submitBtn = document.getElementById("submit-btn");
function validate(evt) {
    evt.preventDefault();
    let regvFirstName = /^[a-zA-z]+(\s|-)?[a-zA-z]+$/;
    let regvLastName = /^[a-zA-z]+(\s|-)?[a-zA-z]+$/;
    const objFromValidate = {};
    if (regvFirstName.test(firstname.value) & regvLastName.test(lastname.value)) {
        objFromValidate.firstName = true;
        objFromValidate.lastName = true;
        console.log(objFromValidate);
    } else {
        alert('Введите корректно имя и фамилию');
        if (regvFirstName.test(firstname.value)) {
            objFromValidate.firstName = true;
        } else {
            objFromValidate.firstName = false;

        }if (regvLastName.test(lastname.value)) {
            objFromValidate.lastName = true;
        } else {
            objFromValidate.lastName = false;
        }
        console.log(objFromValidate);
    }
}
submitBtn.addEventListener("click", validate);
